{"answers": [{"answer_start": 120, "text": "deterministic"}, {"answer_start": 120, "text": "deterministic algorithms"}, {"answer_start": 120, "text": "deterministic"}, {"answer_start": 120, "text": "deterministic algorithms"}, {"answer_start": 120, "text": "deterministic algorithms"}], "question": "What is the name of another type of modern primality test?", "id": "57297d421d046914007794e7", "prediction_results": {"best_span_str": "probabilistic", "span_start_probs": [0.001632876112125814, 0.000294406374450773, 0.0002026078727794811, 0.00017581434804014862, 0.006130204536020756, 0.0013718445552513003, 0.0001798652665456757, 4.269327473593876e-05, 1.9999995856778696e-05, 0.0003127016534563154, 0.00010093174932990223, 0.0033335951156914234, 0.0008073450881056488, 0.0008158543496392667, 8.036051440285519e-05, 0.775098979473114, 0.0007944789831526577, 5.229772432358004e-05, 0.011283716186881065, 0.06819950044155121, 0.0005369508871808648, 0.0001382688496960327, 3.669182842713781e-05, 7.598664524266496e-05, 0.10488896071910858, 0.0002772669249679893, 6.221296644071117e-05, 0.01119909342378378, 0.00014081185508985072, 1.4568301594408695e-05, 1.4948908756196033e-05, 1.1931615517823957e-05, 5.351594609237509e-06, 2.3110305846785195e-05, 4.630924649973167e-06, 6.68481006869115e-05, 3.046585879928898e-05, 4.421732228365727e-05, 2.406605017313268e-05, 2.2409787561628036e-05, 4.2479264266148675e-06, 0.0001296811387874186, 2.3405542037835403e-07, 2.5442655896767974e-05, 2.02120941139583e-06, 2.9621007342939265e-05, 3.664956466309377e-06, 1.4475533589575207e-06, 0.00027072938974015415, 2.532822691136971e-06, 1.1530999017850263e-06, 1.7091475456254557e-05, 0.00013796155690215528, 6.6215225160703994e-06, 5.433338401417132e-07, 2.2877793526276946e-07, 1.678772605373524e-05, 5.525597316591302e-06, 1.2533014341897797e-06, 2.2890320394708397e-07, 2.8511301934486255e-05, 2.6274797164660413e-06, 2.5630088202888146e-06, 2.4186924747482408e-06, 8.772225555730984e-06, 1.3143327123543713e-05, 1.6362664609914646e-06, 5.674874500982696e-06, 0.00016557185153942555, 4.0292172798217507e-07, 7.727384945610538e-05, 0.0005840102676302195, 3.1420047434949083e-06, 2.523600187487318e-06, 0.0005008341395296156, 1.3246428807178745e-06, 0.0005393378087319434, 2.735715952439932e-06, 3.660045067022111e-08, 1.008149524750479e-06, 2.6605821403791197e-06, 2.8608111435346473e-08, 1.6557176252263162e-07, 2.354280923100305e-06, 6.729931101290276e-07, 3.005761186614109e-07, 2.676935650924861e-07, 1.893472045821909e-08, 4.806780680155498e-07, 2.96237431030022e-07, 3.4822825512037525e-08, 3.0177284315868746e-06, 1.9575357157464168e-07, 9.013707312988117e-06, 8.886378054739907e-06, 3.8141076856845757e-06, 4.3664178406288556e-07, 1.650790545681957e-05, 7.891412678873166e-07, 3.3444851510466833e-07, 1.8350017683133046e-07, 2.6867505553695992e-08, 1.4188302088768978e-07, 7.547013183284434e-07, 2.7773612600867637e-06, 8.995840516945464e-07, 1.1447879160186858e-06, 1.1861137863888871e-05, 1.3627233101942693e-06, 8.08976210464607e-07, 2.251045953016728e-05, 2.827373918989906e-06, 3.56843111148919e-06, 2.5204617486451752e-06, 1.2214215530548245e-05, 4.131974037591135e-06, 1.2565278666443191e-06, 1.492445790063357e-06, 3.58708098247007e-06, 1.365306843581493e-06, 1.1630412899421572e-07, 8.310015573442797e-07, 1.0251609410261153e-06, 1.569123071476497e-07, 5.1213927321214214e-08, 6.512008212666842e-07, 1.1730131518561393e-05, 6.136022534519725e-07, 1.121956415772729e-06, 0.00012968324881512672, 7.492749773518881e-06, 1.7381294128426816e-06, 5.573065777753072e-07, 9.447932569628392e-08, 3.596161377572571e-06, 0.00022252672351896763, 1.06011975731235e-06, 1.2709031125268666e-06, 7.984076364664361e-05, 1.0910945093201008e-05, 5.757840881415177e-06, 3.476026904536411e-05, 0.00013809911615680903, 0.0007564819534309208, 8.036186045501381e-06, 1.59132554244934e-07, 1.7132046195911244e-05, 9.671490488472045e-07, 9.678742571850307e-07, 2.169799273588069e-07, 8.951195127337996e-07, 3.371862703716033e-06, 5.489821887749713e-06, 9.269475640394376e-07, 1.6138732462422922e-05, 4.445535068953177e-06, 1.2826861848225235e-06, 0.00016642228001728654, 7.643449748684361e-07, 0.0001355059357592836, 1.125432262938375e-07, 6.414886399852548e-08, 9.769060227426962e-08, 3.644038315542275e-08, 1.9324238209605937e-08, 1.9314740029585664e-07, 2.5083269861170265e-07, 1.4789387492442074e-08, 1.4993875083746389e-06, 9.583298776760785e-08, 3.7003260331403e-06, 2.6902196168521186e-06, 2.3522845538082038e-07, 5.72510714391683e-08, 2.28784045930297e-07, 1.3016064031035057e-06, 2.2219175832560722e-07, 4.833449111174559e-06, 1.6116146070999093e-06, 1.1343807955199736e-06, 6.581598199772998e-07, 3.942463990824763e-06, 2.0320460407674545e-06, 4.827872430723801e-07, 8.315377897361032e-08, 1.7475369986641454e-06, 2.710766011659871e-06, 1.1829151844722219e-06, 1.754051055513628e-07, 2.564374517532997e-05, 7.644404149687034e-07, 2.0170271000097273e-06, 1.6694994542376662e-07, 1.2419168626820465e-07, 5.206214268582698e-07, 9.103052320824645e-07, 4.111747693968937e-05, 1.2460013749659993e-05, 2.185956145694945e-05, 2.804562245728448e-05, 5.014491762267426e-06, 1.1352856290614e-06, 3.536808799253777e-05, 0.00010472185385879129, 1.665905256231781e-05, 1.3376826245803386e-05, 0.00044803848140873015, 0.00023672850511502475, 1.3320023754204158e-05, 0.0058920602314174175, 2.064976615656633e-05], "span_end_probs": [0.000654617149848491, 0.00014826627739239484, 0.0016898340545594692, 3.864458903990453e-06, 1.3356684576137923e-05, 1.4234737136575859e-05, 0.001796688069589436, 2.0486304492806084e-06, 2.1497285160876345e-06, 9.147461969405413e-05, 3.0703356515005e-06, 5.875949136679992e-05, 4.775801062351093e-05, 0.008712793700397015, 3.64121951861307e-05, 0.6346604228019714, 0.00044925662223249674, 1.274782061955193e-05, 0.00012137455632910132, 5.480200343299657e-05, 0.02397073619067669, 0.0478474497795105, 0.032872818410396576, 2.0484498236328363e-05, 0.0010536886984482408, 0.2171940803527832, 0.016154857352375984, 7.7202552347444e-05, 0.005383861251175404, 1.1839224498544354e-05, 3.925588771380717e-06, 7.4462332122493535e-06, 7.750241479698161e-07, 7.84999065217562e-06, 6.365964395627088e-07, 3.823562565230532e-06, 1.8904282796938787e-06, 1.3922776815888938e-06, 2.9692944281123346e-06, 2.4611093977000564e-05, 8.924668009058223e-07, 3.757653394131921e-05, 4.893585128229461e-07, 0.00038168622995726764, 0.00010489537089597434, 7.715938409091905e-06, 5.7436686802248005e-06, 9.236665619027917e-07, 8.812415217107628e-06, 2.1588783056358807e-05, 4.5363870526671235e-07, 6.431189945033111e-07, 1.0335952538298443e-05, 0.0002745691454038024, 6.98749499861151e-06, 2.5964427550206892e-06, 6.503112217615126e-06, 1.7622879795453628e-06, 1.7085170838981867e-05, 2.772748530333047e-06, 9.63662500907958e-07, 7.203140626188542e-07, 2.9224236186564667e-06, 1.4209012988430914e-06, 9.996260814659763e-07, 4.0340946725336835e-06, 9.567821507516783e-06, 8.742556474317098e-07, 0.00024546118220314384, 5.772913596047147e-07, 6.040293669684615e-07, 8.218952280003577e-05, 5.499697363120504e-05, 8.3101900827387e-07, 0.00027255029999651015, 5.446905561257154e-05, 8.496703958371654e-05, 0.00013230863260105252, 2.2434376489854913e-07, 4.3618064182737726e-07, 8.328319381689653e-05, 3.936663233616855e-06, 5.311982249622815e-07, 4.3296211060805945e-07, 2.477157977409661e-06, 1.0123058018507436e-06, 2.2316000922728563e-06, 2.2223434825718869e-07, 5.699691314475785e-07, 1.7761318531483994e-06, 3.157400385589426e-07, 7.303154416149482e-05, 1.4639288565376773e-05, 5.142082386555558e-07, 2.1350559109123424e-05, 1.2057055300829234e-06, 2.684800222141348e-07, 6.386240329447901e-06, 5.145722070665215e-07, 5.400797249421885e-07, 1.772576638359169e-06, 2.2168801194766274e-07, 3.420628331696207e-07, 6.592050567633123e-07, 7.3670244091772474e-06, 3.324137651361525e-05, 2.3670219889027067e-05, 2.5057820494112093e-06, 3.92143510907772e-06, 7.24464143786463e-07, 4.807890263691661e-07, 4.0157635794457747e-07, 1.428895029675914e-05, 1.10328403479798e-06, 1.863757574938063e-06, 9.438813890483289e-07, 4.107507152184553e-07, 4.931380317430012e-06, 5.0245976126461755e-06, 2.436972408759175e-06, 3.097308649557817e-07, 6.186224936755025e-07, 1.783353809514665e-06, 1.7524125723866746e-05, 3.081985141761834e-06, 1.153024072664266e-06, 1.0927456060016993e-06, 1.5586391555189039e-06, 3.881665691096714e-07, 5.027828137826873e-06, 0.00012000649439869449, 4.8931910896499176e-06, 1.4431934687308967e-06, 2.8833824217144866e-07, 5.814779910906509e-07, 1.4007767276780214e-05, 0.00026553418138064444, 9.441578004043549e-05, 2.5979388738051057e-06, 2.1130178993189475e-06, 1.7550626125739655e-06, 8.572004617235507e-07, 8.782120858086273e-06, 2.616271740407683e-05, 0.00027823654818348587, 8.436372240794299e-07, 4.277859716239618e-06, 1.1590989288379205e-06, 0.0001447292452212423, 1.3171572391001973e-05, 5.782474090665346e-07, 3.2814836004035897e-07, 4.46833882961073e-06, 4.4581975089386106e-07, 1.8138299537895364e-06, 4.412281668919604e-06, 9.279293067265826e-07, 0.00012190934648970142, 9.249314985027013e-07, 0.0015722531825304031, 8.578273082093801e-06, 3.2264154015138047e-07, 5.611620395029604e-07, 7.34523780465679e-07, 1.8307000004824658e-07, 2.3818903116534784e-07, 6.656151754214079e-07, 1.324273455338698e-07, 5.8137375162914395e-05, 2.6957466161547927e-06, 4.408355209761794e-07, 1.0963071872538421e-06, 2.708818840346794e-07, 2.3883751509856666e-07, 3.1623244467482436e-07, 1.065845253833686e-06, 3.06453898701875e-07, 2.1399939669208834e-06, 1.6942385627771728e-05, 4.1174922671416425e-07, 4.2661650923037087e-07, 1.5374819213320734e-06, 1.1184491768290172e-06, 2.1303796529537067e-05, 1.6228264939854853e-05, 3.2989518672366103e-07, 4.401809974297066e-07, 1.3253354609332746e-06, 4.0405339518656547e-07, 0.00018372107297182083, 3.32843919750303e-05, 2.7204427510696405e-07, 2.410900492577639e-07, 2.5073583742596384e-07, 1.438276649423642e-05, 3.2828656912897713e-06, 8.086615252977936e-07, 4.4158491618873086e-07, 7.149645625759149e-06, 3.2992172691592714e-06, 4.774726403411478e-05, 5.505966328200884e-06, 7.168738420659793e-07, 1.8367500160820782e-06, 6.661584393441444e-06, 6.942999561942997e-07, 2.3743755264149513e-06, 5.192217213334516e-05, 2.602531367301708e-06, 0.001089541707187891, 0.000295417063171044], "passage_tokens": ["Modern", "primality", "tests", "for", "general", "numbers", "n", "can", "be", "divided", "into", "two", "main", "classes", ",", "probabilistic", "(", "or", "\"", "Monte", "Carlo", "\"", ")", "and", "deterministic", "algorithms", ".", "Deterministic", "algorithms", "provide", "a", "way", "to", "tell", "for", "sure", "whether", "a", "given", "number", "is", "prime", "or", "not", ".", "For", "example", ",", "trial", "division", "is", "a", "deterministic", "algorithm", "because", ",", "if", "performed", "correctly", ",", "it", "will", "always", "identify", "a", "prime", "number", "as", "prime", "and", "a", "composite", "number", "as", "composite", ".", "Probabilistic", "algorithms", "are", "normally", "faster", ",", "but", "do", "not", "completely", "prove", "that", "a", "number", "is", "prime", ".", "These", "tests", "rely", "on", "testing", "a", "given", "number", "in", "a", "partly", "random", "way", ".", "For", "example", ",", "a", "given", "test", "might", "pass", "all", "the", "time", "if", "applied", "to", "a", "prime", "number", ",", "but", "pass", "only", "with", "probability", "p", "if", "applied", "to", "a", "composite", "number", ".", "If", "we", "repeat", "the", "test", "n", "times", "and", "pass", "every", "time", ",", "then", "the", "probability", "that", "our", "number", "is", "composite", "is", "1/(1-p)n", ",", "which", "decreases", "exponentially", "with", "the", "number", "of", "tests", ",", "so", "we", "can", "be", "as", "sure", "as", "we", "like", "(", "though", "never", "perfectly", "sure", ")", "that", "the", "number", "is", "prime", ".", "On", "the", "other", "hand", ",", "if", "the", "test", "ever", "fails", ",", "then", "we", "know", "that", "the", "number", "is", "composite", "."], "best_span": [15, 15], "best_span_char": [83, 96]}, "_id": "57297d421d046914007794e7", "context": "Modern primality tests for general numbers n can be divided into two main classes, probabilistic (or \"Monte Carlo\") and deterministic algorithms. Deterministic algorithms provide a way to tell for sure whether a given number is prime or not. For example, trial division is a deterministic algorithm because, if performed correctly, it will always identify a prime number as prime and a composite number as composite. Probabilistic algorithms are normally faster, but do not completely prove that a number is prime. These tests rely on testing a given number in a partly random way. For example, a given test might pass all the time if applied to a prime number, but pass only with probability p if applied to a composite number. If we repeat the test n times and pass every time, then the probability that our number is composite is 1/(1-p)n, which decreases exponentially with the number of tests, so we can be as sure as we like (though never perfectly sure) that the number is prime. On the other hand, if the test ever fails, then we know that the number is composite.", "title": "Prime_number", "machine_answer": {"answer_start": 83, "text": "probabilistic"}}