{"answers": [{"answer_start": 411, "text": "adjacency matrices"}, {"answer_start": 392, "text": "directly via their adjacency matrices"}], "question": "What is one way in which graphs can be encoded? ", "id": "56e181d9e3433e1400422fa4", "prediction_results": {"best_span_str": "directly via their adjacency matrices", "span_start_probs": [2.955391380510264e-07, 4.3368956426093064e-07, 5.656655957864132e-06, 2.2581461678328196e-07, 1.2253413395058033e-08, 2.3683253402850823e-07, 1.0327608634952412e-07, 3.238688748297136e-07, 4.140848943734454e-07, 4.883653673459776e-06, 1.1372867447789758e-05, 3.6557293014993775e-07, 2.9329028166102944e-06, 1.160085139417788e-05, 1.3648273977651115e-07, 9.273120440411731e-07, 1.961007853878982e-07, 1.2611233614734374e-05, 1.9526270989445038e-05, 1.957734099278241e-07, 8.893946414900711e-07, 1.0644336043696967e-06, 4.494707468438719e-07, 6.868440777907381e-06, 4.767738573718816e-05, 3.964298230130225e-06, 1.2587861419888213e-07, 3.0312381227304286e-07, 8.615134561296145e-08, 4.553164671960985e-06, 4.806710876437137e-06, 5.866185688319092e-07, 4.7042090045579243e-07, 3.001788684287021e-07, 2.8538769569763645e-08, 2.3623859135568637e-07, 3.5255789043731056e-07, 3.508645249894471e-06, 3.96358227590099e-05, 4.839356552110985e-05, 5.861538170393032e-07, 0.00028046005172654986, 7.285312904059538e-07, 2.0321291231084615e-05, 3.435501275816932e-05, 6.365201261360198e-05, 0.0001318965805694461, 1.2098097386115114e-06, 9.093029802897945e-06, 2.3455737391486764e-05, 1.2037263559250277e-06, 0.0005097292014397681, 1.0396952347946353e-05, 1.9343715393915772e-06, 3.3408791750844102e-06, 0.00032101571559906006, 2.5880478915496496e-06, 5.060924195277039e-07, 2.4329474399564788e-05, 1.8028639487965847e-06, 3.6414719488675473e-06, 6.846157339168712e-05, 1.0168376320507377e-05, 3.503624611767009e-05, 0.0007912934524938464, 4.793936386704445e-05, 6.744116490153829e-06, 0.0002860671957023442, 0.00039822995313443244, 0.022769995033740997, 0.00036282025394029915, 3.25468135997653e-05, 0.002124249469488859, 0.030434297397732735, 0.0012817664537578821, 0.00023211637744680047, 0.0015493726823478937, 0.31145963072776794, 0.20953869819641113, 0.08138475567102432, 0.28120848536491394, 0.0014834955800324678, 9.001077705761418e-05, 0.00013833613775204867, 0.016093730926513672, 0.020988505333662033, 0.0004418947210069746, 0.0063585503958165646, 0.00013639492681249976, 0.00011003185500157997, 0.008411755785346031, 4.151335087954067e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "span_end_probs": [3.708527856360888e-06, 4.3335978716640966e-07, 1.1425734101067064e-06, 1.9094210074399598e-05, 4.5369003487394366e-07, 1.0311137543794757e-07, 5.228717441241315e-07, 3.445489937803359e-07, 7.181652250665138e-08, 1.241059095491437e-07, 1.580448724780581e-06, 8.031692999566076e-08, 7.67360717190968e-08, 7.186177390394732e-05, 1.4195268704497721e-05, 2.942466892363882e-07, 2.1884562784180162e-07, 1.2634602342131984e-07, 8.682392945047468e-06, 8.327191380885779e-08, 4.2593219973241503e-07, 1.1897953555717322e-07, 8.912175530895183e-08, 1.7717080424972664e-07, 1.6651540590828517e-06, 0.0001731697702780366, 1.4728149722031958e-07, 1.1070430900872452e-06, 2.2240156738462247e-07, 1.801110869337208e-07, 1.066784534486942e-06, 3.6272226111577766e-07, 1.4200453790635947e-07, 1.2442916386135039e-06, 9.560091712046415e-06, 2.220073156422586e-06, 3.9988975686355843e-07, 2.2599564886149892e-07, 2.2358801743393997e-07, 2.639104968693573e-05, 3.2670996574779565e-07, 0.0002818835782818496, 2.349304486415349e-05, 5.537519882636843e-07, 1.7069675095626735e-07, 2.6421267307341623e-07, 8.547096399524889e-07, 1.9696170738825458e-07, 1.4652566278527956e-05, 5.167984272702597e-05, 9.32928116981202e-07, 1.148080173152266e-05, 0.0003727967559825629, 1.280794776903349e-06, 3.3854473713290645e-07, 0.00022176545462571084, 5.545304588849831e-07, 1.8491162734335376e-07, 7.830536219444184e-07, 7.84773874329403e-05, 1.648178840696346e-05, 6.76568333801697e-07, 3.238405668071209e-07, 1.0608166434167288e-07, 2.3827358290873235e-06, 9.567278880240337e-08, 8.215715752157848e-08, 5.441524990601465e-07, 3.2754135759205383e-07, 4.380702011985704e-05, 0.017970429733395576, 0.00019665963191073388, 8.723560313228518e-06, 9.396778477821499e-05, 4.81288907394628e-07, 5.349529033082945e-07, 3.110432589892298e-05, 0.00028328009648248553, 7.883452053647488e-05, 0.0001234822702826932, 0.001024831784889102, 0.8861170411109924, 0.00719257490709424, 0.00014416096382774413, 5.283563496050192e-06, 0.0001230271445820108, 5.559729106607847e-05, 0.0001617645611986518, 0.007252734154462814, 3.651539373095147e-05, 0.049907222390174866, 0.0277220718562603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "passage_tokens": ["When", "considering", "computational", "problems", ",", "a", "problem", "instance", "is", "a", "string", "over", "an", "alphabet", ".", "Usually", ",", "the", "alphabet", "is", "taken", "to", "be", "the", "binary", "alphabet", "(", "i.e.", ",", "the", "set", "{", "0,1", "}", ")", ",", "and", "thus", "the", "strings", "are", "bitstrings", ".", "As", "in", "a", "real", "-", "world", "computer", ",", "mathematical", "objects", "other", "than", "bitstrings", "must", "be", "suitably", "encoded", ".", "For", "example", ",", "integers", "can", "be", "represented", "in", "binary", "notation", ",", "and", "graphs", "can", "be", "encoded", "directly", "via", "their", "adjacency", "matrices", ",", "or", "by", "encoding", "their", "adjacency", "lists", "in", "binary", "."], "best_span": [77, 81], "best_span_char": [392, 429]}, "_id": "56e181d9e3433e1400422fa4", "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.", "title": "Computational_complexity_theory", "machine_answer": {"answer_start": 392, "text": "directly via their adjacency matrices"}}