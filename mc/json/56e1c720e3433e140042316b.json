{"answers": [{"answer_start": 220, "text": "DTIME(n2)"}, {"answer_start": 220, "text": "DTIME(n2)"}, {"answer_start": 220, "text": "DTIME(n2)"}], "question": "In what expression can one expect to find DTIME(n)", "id": "56e1c720e3433e140042316b", "prediction_results": {"best_span_str": "strict", "span_start_probs": [0.0006512784748338163, 0.002793253632262349, 0.02074664644896984, 0.003905170364305377, 3.619813287514262e-05, 3.5090101846435573e-06, 2.594243369458127e-06, 3.1536594633507775e-06, 6.564690465893364e-06, 0.00030797914951108396, 9.005083484225906e-06, 0.00017834804020822048, 1.609299761184957e-05, 7.76528540882282e-05, 2.8504977308330126e-05, 0.0011582712177187204, 0.0002952745126094669, 0.0005638119182549417, 7.703720257268287e-06, 6.574788130819798e-05, 0.0006248457357287407, 2.4028173356782645e-05, 0.011036618612706661, 0.00021431135246530175, 0.0009977943263947964, 0.000710002554114908, 0.0005476150545291603, 0.000706912949681282, 0.00015334761701524258, 3.903980996255996e-06, 0.0012913921382278204, 8.737800817470998e-05, 0.016030585393309593, 0.004643869586288929, 7.512561569456011e-05, 0.0038698608987033367, 0.007694788742810488, 0.000221039037569426, 0.011538594961166382, 0.01295522041618824, 0.0070561920292675495, 0.05772373825311661, 5.814072210341692e-05, 0.0027885334566235542, 0.058174602687358856, 0.007250817026942968, 0.0011869753943756223, 0.024809258058667183, 0.003021134762093425, 0.030573686584830284, 0.06705821305513382, 0.04045486077666283, 0.13636472821235657, 0.0031562428921461105, 0.183944433927536, 0.000507925811689347, 0.007943176664412022, 0.004698369652032852, 3.792916686506942e-05, 0.0074235317297279835, 0.0005812578601762652, 0.00012079065345460549, 0.015526174567639828, 0.0035678325220942497, 0.0004101259692106396, 0.0029307377990335226, 0.007063937373459339, 0.0013962932862341404, 0.015038028359413147, 0.009509850293397903, 0.06050467863678932, 0.03435331583023071, 0.00031636847415938973, 0.058017805218696594, 0.0033754066098481417, 0.002572095487266779, 7.813436968717724e-05, 0.00018034884124062955, 0.0019978578202426434, 0.00013600739475805312, 0.0002080566919175908, 0.003999723587185144, 6.876677798572928e-05, 0.00016859779134392738, 0.00035763601772487164, 0.00018495523545425385, 5.572727968683466e-05, 4.4924883695784956e-05, 2.8548642148962244e-05, 2.121131046806113e-06, 1.1150654245284386e-05, 2.932140887423884e-05, 9.876210242509842e-06, 4.659893238567747e-05, 0.00018511478265281767, 2.9892225938965566e-05, 5.8371169870952144e-05, 3.524471594573697e-06, 9.104180207941681e-06, 0.0009855210082605481, 0.0017490138998255134, 8.805391553323716e-05, 0.0032280231826007366, 8.867705219017807e-06, 0.0019333417294546962, 0.00011976096720900387, 1.106605395762017e-05, 2.512187165848445e-05, 0.0008547408506274223, 1.4353365259012207e-05, 0.0004919085768051445, 3.726386421476491e-05, 3.6483044823398814e-05, 2.877425322367344e-05, 2.7483043595566414e-05, 6.753195339115337e-05, 0.005448926240205765, 0.0009318515658378601, 0.0002988531196024269, 0.005390424747020006, 0.0025736596435308456, 0.0005605511250905693, 9.572378075972665e-06, 0.001343923038803041, 4.856801388086751e-05, 0.0003825668536592275, 5.330786370905116e-05, 0.0001830359542509541, 0.00031023871270008385, 4.038721090182662e-05, 1.8446438843966462e-05, 8.035165956243873e-05, 4.0875755075830966e-05, 4.5799501094734296e-05, 8.209398220060393e-05, 1.655773667152971e-05, 1.0078788363898639e-06, 8.9945227955468e-05, 6.650858722423436e-06, 2.4927392587414943e-05, 5.9189034800510854e-05, 9.270026930607855e-05, 3.290849053882994e-05, 0.0001318575959885493, 1.4623806237068493e-05, 2.0842775484197773e-05, 3.1351225970865926e-07, 3.979327084380202e-05, 1.9211036033084383e-06, 8.012893886188976e-06, 3.0664798487123335e-06, 0.00014813758025411516, 6.119773024693131e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "span_end_probs": [4.430515218700748e-06, 3.2077639389171964e-06, 0.0003697560168802738, 0.028130292892456055, 0.003902214579284191, 1.4898301742505282e-05, 6.0964488511672243e-05, 0.0003827101900242269, 6.0214933910174295e-05, 4.358678779681213e-06, 6.796599336666986e-07, 9.331094042863697e-05, 1.1494265663714032e-06, 3.158356048515998e-05, 2.3516490728070494e-06, 9.255335316993296e-05, 1.9530152712832205e-06, 0.0002669957175385207, 0.00011648182407952845, 1.076542389455426e-06, 6.605980161111802e-05, 1.7582184227649122e-05, 0.0028943081852048635, 0.0030379348900169134, 0.000896644894964993, 5.2094099373789504e-05, 2.387803306191927e-06, 3.45937987731304e-05, 5.57470484636724e-05, 2.3579507342219586e-06, 0.008968159556388855, 0.0012159234611317515, 2.5508647013339214e-05, 0.001512270886451006, 2.9307904696906917e-05, 1.0347345778427552e-05, 0.00011916930816369131, 0.0001448763650842011, 4.198149326839484e-06, 0.003823299193754792, 0.00015884930326137692, 0.0473797433078289, 0.010375004261732101, 0.0004486320831347257, 9.752671758178622e-06, 1.2150082966400078e-06, 1.4294699894890073e-06, 0.0029252588283270597, 1.1195576917089056e-05, 0.0006673385505564511, 8.260838512796909e-05, 2.8493561330833472e-05, 0.02085399627685547, 0.0003100913600064814, 0.5941304564476013, 0.0209407526999712, 1.2338693522906397e-05, 3.3965290640480816e-05, 5.700230758520775e-07, 6.196081085363403e-05, 0.014475365169346333, 0.0008090154151432216, 3.440714499447495e-05, 0.00014577526599168777, 1.5383822756120935e-05, 5.8453638303035405e-06, 0.00016048192628659308, 1.6618141671642661e-06, 0.0003498229489196092, 4.5687735109822825e-05, 0.0003692219906952232, 0.0022485696244984865, 9.139803296420723e-06, 0.00048099030391313136, 0.02682611718773842, 0.13402409851551056, 0.020238276571035385, 0.004074581898748875, 5.879299806110794e-06, 2.97374555202623e-07, 1.045003955368884e-06, 0.0001629022299312055, 0.0023154234513640404, 2.817178210534621e-05, 1.9967525076936e-05, 1.1992272447969299e-05, 1.397537971570273e-06, 3.6840261600445956e-05, 0.0006057090940885246, 1.7270609760089428e-06, 2.2776082460040925e-06, 0.0005421622190624475, 0.00027006957679986954, 4.3194213503738865e-06, 2.538679473218508e-05, 2.2059805360186147e-06, 1.5819674445083365e-05, 0.002026982605457306, 0.0005233298288658261, 2.3247350782185094e-06, 3.1191152629617136e-06, 3.1521753385277407e-07, 8.97817881195806e-05, 9.81184939519153e-07, 0.00034071464324370027, 0.008642230182886124, 7.223698048619553e-05, 4.452040229807608e-06, 1.0309964636689983e-05, 1.2381854048726382e-06, 0.0002787214471027255, 0.00020374190353322774, 6.66049982100958e-06, 9.816258534556255e-05, 0.0011941430857405066, 0.000417019531596452, 8.171837180270813e-06, 9.885495819617063e-05, 9.047438993547985e-07, 1.3842938642483205e-05, 4.31299013143871e-05, 0.016951192170381546, 0.00025758694391697645, 3.699168155435473e-05, 2.1211369585216744e-06, 0.00015727920981589705, 1.8121032780982205e-06, 4.973843260813737e-06, 4.2402229155413806e-05, 0.0011144679738208652, 5.543745373870479e-06, 2.842704589056666e-06, 1.978159843929461e-06, 1.187211296382884e-06, 6.542627488670405e-06, 0.0001417934545315802, 1.1300339792796876e-06, 0.0002901431580539793, 1.9465434888843447e-05, 0.0002924649161286652, 2.825044975907076e-05, 6.560694600921124e-05, 1.9358440113137476e-06, 1.9228275050409138e-05, 3.511212753437576e-06, 6.283222319325432e-06, 8.909083248909155e-07, 0.00047006577369756997, 2.6211212116322713e-06, 5.906052251702931e-07, 5.973881798126968e-07, 0.00122545484919101, 0.0015060597797855735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "passage_tokens": ["For", "the", "complexity", "classes", "defined", "in", "this", "way", ",", "it", "is", "desirable", "to", "prove", "that", "relaxing", "the", "requirements", "on", "(", "say", ")", "computation", "time", "indeed", "defines", "a", "bigger", "set", "of", "problems", ".", "In", "particular", ",", "although", "DTIME(n", ")", "is", "contained", "in", "DTIME(n2", ")", ",", "it", "would", "be", "interesting", "to", "know", "if", "the", "inclusion", "is", "strict", ".", "For", "time", "and", "space", "requirements", ",", "the", "answer", "to", "such", "questions", "is", "given", "by", "the", "time", "and", "space", "hierarchy", "theorems", "respectively", ".", "They", "are", "called", "hierarchy", "theorems", "because", "they", "induce", "a", "proper", "hierarchy", "on", "the", "classes", "defined", "by", "constraining", "the", "respective", "resources", ".", "Thus", "there", "are", "pairs", "of", "complexity", "classes", "such", "that", "one", "is", "properly", "included", "in", "the", "other", ".", "Having", "deduced", "such", "proper", "set", "inclusions", ",", "we", "can", "proceed", "to", "make", "quantitative", "statements", "about", "how", "much", "more", "additional", "time", "or", "space", "is", "needed", "in", "order", "to", "increase", "the", "number", "of", "problems", "that", "can", "be", "solved", "."], "best_span": [54, 54], "best_span_char": [283, 289]}, "_id": "56e1c720e3433e140042316b", "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.", "title": "Computational_complexity_theory", "machine_answer": {"answer_start": 283, "text": "strict"}}