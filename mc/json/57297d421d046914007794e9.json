{"answers": [{"answer_start": 833, "text": "1/(1-p)n"}, {"answer_start": 833, "text": "1/(1-p)n"}, {"answer_start": 833, "text": "1/(1-p)n"}, {"answer_start": 833, "text": "1/(1-p)n"}, {"answer_start": 833, "text": "1/(1-p)n"}], "question": "When using a probabilistic algorithm, how is the probability that the number is composite expressed mathematically?", "id": "57297d421d046914007794e9", "prediction_results": {"best_span_str": "1/(1-p)n", "span_start_probs": [0.00012393714860081673, 9.141895134234801e-06, 1.892768182187865e-06, 2.8928548090334516e-07, 3.4701829463301692e-06, 1.2295881788304541e-06, 5.968835807834694e-07, 1.9790907401784352e-07, 1.1758535833905626e-07, 6.146527994133066e-06, 1.9946730844822014e-06, 3.299600211903453e-05, 3.6005749279865995e-06, 2.4585374376329128e-06, 3.442834497491276e-07, 0.00014616991393268108, 2.8519857551145833e-06, 2.3484719235966622e-07, 2.5215018467861228e-05, 0.0002365049149375409, 2.641333367137122e-06, 6.61475382912613e-07, 4.407275469020533e-07, 1.11383496914641e-06, 5.574799433816224e-05, 1.2360462733340682e-06, 9.727375982038211e-06, 0.00022800963779445738, 1.3261270623843302e-06, 8.061464541242458e-06, 8.2942806329811e-06, 8.947001333581284e-06, 5.1374877330090385e-06, 1.497925040894188e-05, 4.437102688825689e-06, 4.2943844164256006e-05, 1.763188629411161e-05, 2.2106671167421155e-05, 1.1493392776174005e-05, 1.791798604244832e-05, 2.273094651172869e-06, 7.14810230419971e-05, 5.039203188061947e-07, 3.8915259210625663e-05, 6.3213874454959296e-06, 0.0007643647841177881, 4.416595402290113e-05, 6.984008359722793e-05, 0.02638383023440838, 2.4550614398322068e-05, 2.367481783949188e-06, 2.2043410353944637e-05, 3.41314407705795e-05, 2.2886035822011763e-06, 2.905279689002782e-05, 9.162816240859684e-06, 0.0014170219656080008, 0.0001773699768818915, 3.8264064642135054e-05, 2.0651030354201794e-05, 0.01555157732218504, 0.001720408909022808, 0.0013758139684796333, 0.0010939276544377208, 0.0004337149439379573, 0.00042740863864310086, 0.00014692543481942266, 0.0001485843677073717, 0.0005339122144505382, 2.165975729440106e-06, 0.0004429433320183307, 0.0004895841120742261, 0.00037269096355885267, 5.656628673023079e-06, 0.0002127424959326163, 3.7929446989437565e-05, 9.55750365392305e-05, 2.3717911972198635e-06, 4.780251401825808e-06, 0.0005844413535669446, 0.00019107526168227196, 4.935792503601988e-07, 3.543484126566909e-05, 0.0004535281041171402, 0.00011912747868336737, 0.00012411552597768605, 3.596832539187744e-05, 4.6992336137918755e-06, 0.00010507721162866801, 6.635952740907669e-05, 2.758703885774594e-06, 0.0002871210454031825, 3.980262135883095e-06, 2.3437758500222117e-05, 2.5059243853320368e-05, 1.3491453501046635e-05, 6.250274054764304e-06, 6.453278183471411e-05, 1.0625089998939075e-05, 1.2453208000806626e-05, 2.596164631540887e-05, 6.757371011190116e-06, 9.019728167913854e-06, 7.933891174616292e-05, 1.4565635865437798e-05, 1.12383054329257e-06, 1.6249069858531584e-06, 2.0399813365656883e-05, 1.7487091099610552e-06, 2.833728785844869e-06, 0.00011301956692477688, 2.5833120162133127e-05, 4.9628761189524084e-05, 1.6244246580754407e-05, 6.167357787489891e-05, 1.640447044337634e-05, 4.2098517951671965e-06, 5.231860541243805e-06, 2.086224230879452e-05, 2.9335456019907724e-06, 1.9847964267682983e-06, 1.4861163435853086e-05, 1.3708605365536641e-05, 4.861126399191562e-06, 5.793497734885023e-07, 3.632053631008603e-05, 0.00034731661435216665, 0.00012616964522749186, 3.7759673432447016e-05, 0.00048821771633811295, 9.091757965506986e-05, 4.956613338436e-05, 1.6074574887170456e-05, 8.00459019956179e-06, 9.903989848680794e-05, 0.00016128233983181417, 0.0001286951737711206, 4.559262015391141e-05, 0.010714135132730007, 0.0019324934110045433, 0.0006978486198931932, 0.0005922259297221899, 0.0007591147441416979, 0.002878776751458645, 5.7797344197751954e-05, 6.563631359313149e-06, 0.0010584440315142274, 0.00011981496936641634, 3.233143070247024e-05, 1.503202656749636e-05, 0.0007819380261935294, 0.0014441849198192358, 0.0006618610350415111, 0.00014281249605119228, 0.0011444698320701718, 0.00040204377728514373, 3.7290374166332185e-05, 0.002300953259691596, 0.0006448571220971644, 0.8510273098945618, 0.0001374913554172963, 0.0054674167186021805, 0.027743030339479446, 0.0022876786533743143, 5.763145236414857e-05, 0.00011350010754540563, 7.911201100796461e-05, 1.7571881016920088e-06, 5.779684579465538e-05, 9.176887942885514e-06, 0.004743248224258423, 0.0005876387585885823, 3.547054438968189e-05, 1.654313200560864e-05, 0.0002189840452047065, 0.00046709488378837705, 2.1549763914663345e-05, 0.00019114924361929297, 1.5413779692607932e-05, 2.3433241949533112e-05, 0.00022621497919317335, 0.00028298728284426033, 3.1790314096724615e-05, 6.885557922942098e-06, 1.5926611922623124e-06, 0.0005053082713857293, 0.0005016779759898782, 0.0003900467127095908, 1.8191823983215727e-05, 0.0008584973402321339, 5.2198272896930575e-05, 0.00317260785959661, 0.00015989634266588837, 2.3400503778248094e-05, 1.3174601008358877e-05, 2.5114415620919317e-05, 0.012727688997983932, 0.0006188751431182027, 0.0011098678223788738, 0.0001295115944230929, 5.7948403991758823e-05, 6.314868187473621e-06, 0.0010836285073310137, 0.000477069232147187, 2.9092971089994535e-05, 2.9627096864714986e-06, 2.564154601714108e-05, 2.266835144837387e-05, 4.112767442165932e-07, 3.2962256227619946e-05, 3.84365048375912e-05], "span_end_probs": [2.0061363102286123e-05, 2.5389994334545918e-05, 0.00010485530947335064, 7.48523518723232e-07, 1.6137283864736673e-06, 8.7076996351243e-06, 1.4822287084825803e-05, 3.5169523471267894e-07, 3.850747134492849e-07, 3.868107341986615e-06, 7.574949449917767e-07, 1.1765325325541198e-05, 3.399496335987351e-06, 0.00010133552132174373, 1.9206697743356926e-06, 7.178990199463442e-05, 6.125408162915846e-07, 2.399702623279154e-07, 1.8047325056613772e-06, 2.429309006402036e-06, 2.3704815248493105e-05, 1.319657349085901e-05, 2.2556198018719442e-05, 4.03350156830129e-07, 1.3158249885236728e-06, 8.869435987435281e-05, 3.506373104755767e-05, 1.4748111425433308e-06, 5.7225884120271076e-06, 2.5737395503711014e-07, 2.1119197413099755e-07, 5.029846761317458e-07, 1.8225064479793218e-07, 1.0130430609933683e-06, 1.72454875269068e-07, 6.162121621855476e-07, 4.102724631138699e-07, 2.3878797605902946e-07, 6.482856633738265e-07, 5.571912879531737e-06, 2.644944743224187e-07, 1.759436599968467e-05, 1.8274108981586323e-07, 6.218802445800975e-05, 3.743536944966763e-05, 1.2888858691439964e-05, 5.486412192112766e-06, 1.4500809584205854e-06, 0.0010866692755371332, 0.0003642681986093521, 1.6180077864191844e-06, 1.0825632443811628e-06, 5.226730536378454e-06, 0.00015932299720589072, 1.357817200187128e-05, 5.532243449124508e-06, 3.929361810151022e-06, 1.097695758289774e-06, 0.00011229416850255802, 1.3791431229037698e-05, 9.22483468457358e-06, 6.256167125684442e-06, 3.11120311380364e-05, 2.45947485382203e-05, 3.0467076612694655e-06, 3.716930950758979e-05, 0.00021069419744890183, 1.8609733842822607e-06, 0.0010302221635356545, 1.6150570445461199e-06, 8.943620741774794e-07, 5.131816214998253e-05, 0.000153058921569027, 1.0855086429728544e-06, 0.0003172325959894806, 5.9713711380027235e-05, 1.821244268285227e-06, 4.307397830416448e-06, 1.3642433316363167e-07, 4.452968482837605e-07, 0.00023118327953852713, 4.723151050711749e-06, 6.6948416588275e-07, 3.5753458860199316e-07, 1.1471501011328655e-06, 1.4884790289215744e-06, 1.220782633026829e-05, 3.2381396408709406e-07, 5.544489454223367e-07, 4.292897301638732e-06, 2.5252083446503093e-07, 0.000448325474280864, 2.9933791665825993e-05, 2.1081265799693938e-07, 2.8982308322156314e-06, 3.327078843540221e-07, 1.5557981214442407e-07, 8.473045909340726e-07, 1.3402522824890184e-07, 2.871860260711401e-07, 5.6800322454364505e-06, 1.6927371859765117e-07, 1.5182124002421915e-07, 6.619546297770285e-07, 8.735139090276789e-06, 4.1662449802970514e-05, 1.9994608010165393e-05, 1.0666256002878072e-06, 1.2136940767959459e-06, 2.61544187196705e-07, 1.842493588810612e-07, 1.7325818646440894e-07, 3.2887328416109085e-06, 6.053375045667053e-07, 1.3289749176692567e-06, 1.249371052836068e-06, 2.6457118451617134e-07, 4.447360424819635e-06, 1.3980780977362883e-06, 8.977828542811039e-07, 2.7520101752998016e-07, 2.4975673795779585e-07, 1.2596444776136195e-06, 3.7912246625637636e-05, 1.6547073755646124e-06, 4.723035829101718e-07, 5.162578986528388e-07, 6.276145086303586e-06, 2.689619122975273e-07, 3.769781415030593e-06, 2.263072929054033e-05, 1.5658043821531464e-06, 9.542615089230821e-07, 3.763389031519182e-07, 3.462271820353635e-07, 2.4065129764494486e-06, 0.00025786375044845045, 6.201603537192568e-05, 6.982694685575552e-06, 5.3684866543335374e-06, 9.72373345575761e-06, 3.5020500490645645e-06, 1.716616861813236e-05, 1.9389312001294456e-05, 0.0009636330651119351, 2.8336567083897535e-06, 6.560626206919551e-05, 1.4904458112141583e-05, 0.00659498106688261, 0.00025600468507036567, 5.117884484207025e-06, 1.8822187257683254e-06, 2.421988574496936e-05, 5.628011763292307e-07, 4.943974090565462e-06, 2.8698916139546782e-05, 2.005536543947528e-06, 0.00011570010974537581, 4.599667590809986e-06, 0.9449033141136169, 0.004919637460261583, 1.6830614185892045e-05, 0.0001142097098636441, 0.00038930654409341514, 6.242180006665876e-06, 8.767446161073167e-06, 2.684135688468814e-05, 2.9006528166064527e-06, 0.017729174345731735, 0.0004712982045020908, 2.46950366999954e-05, 2.0532052076305263e-05, 2.494162572475034e-06, 1.1518062819959596e-05, 9.925167432811577e-06, 5.1481933041941375e-05, 7.608250143675832e-06, 2.395374576735776e-05, 0.0016622527036815882, 9.796419362828601e-06, 6.9385509959829506e-06, 1.5694022295065224e-05, 6.214453151187627e-06, 0.0004336803685873747, 0.0006594887236133218, 4.37260996477562e-06, 3.6647797969635576e-06, 4.70799786853604e-05, 2.099316134263063e-06, 0.009892760775983334, 0.001379952416755259, 7.132016889954684e-06, 4.819808054890018e-06, 2.1642729279847117e-06, 0.0008785239770077169, 3.83576079912018e-05, 8.719782272237353e-06, 2.424705371595337e-06, 2.9965238354634494e-05, 1.7959066099138e-05, 0.0016765445470809937, 6.029028372722678e-05, 7.283865215867991e-06, 9.834217962634284e-06, 4.553879625746049e-05, 1.2168858347649802e-06, 1.8701982753555058e-06, 5.3782201575813815e-05, 1.416399413756153e-06, 8.307959797093645e-05, 0.00039137632120400667], "passage_tokens": ["Modern", "primality", "tests", "for", "general", "numbers", "n", "can", "be", "divided", "into", "two", "main", "classes", ",", "probabilistic", "(", "or", "\"", "Monte", "Carlo", "\"", ")", "and", "deterministic", "algorithms", ".", "Deterministic", "algorithms", "provide", "a", "way", "to", "tell", "for", "sure", "whether", "a", "given", "number", "is", "prime", "or", "not", ".", "For", "example", ",", "trial", "division", "is", "a", "deterministic", "algorithm", "because", ",", "if", "performed", "correctly", ",", "it", "will", "always", "identify", "a", "prime", "number", "as", "prime", "and", "a", "composite", "number", "as", "composite", ".", "Probabilistic", "algorithms", "are", "normally", "faster", ",", "but", "do", "not", "completely", "prove", "that", "a", "number", "is", "prime", ".", "These", "tests", "rely", "on", "testing", "a", "given", "number", "in", "a", "partly", "random", "way", ".", "For", "example", ",", "a", "given", "test", "might", "pass", "all", "the", "time", "if", "applied", "to", "a", "prime", "number", ",", "but", "pass", "only", "with", "probability", "p", "if", "applied", "to", "a", "composite", "number", ".", "If", "we", "repeat", "the", "test", "n", "times", "and", "pass", "every", "time", ",", "then", "the", "probability", "that", "our", "number", "is", "composite", "is", "1/(1-p)n", ",", "which", "decreases", "exponentially", "with", "the", "number", "of", "tests", ",", "so", "we", "can", "be", "as", "sure", "as", "we", "like", "(", "though", "never", "perfectly", "sure", ")", "that", "the", "number", "is", "prime", ".", "On", "the", "other", "hand", ",", "if", "the", "test", "ever", "fails", ",", "then", "we", "know", "that", "the", "number", "is", "composite", "."], "best_span": [159, 159], "best_span_char": [833, 841]}, "_id": "57297d421d046914007794e9", "context": "Modern primality tests for general numbers n can be divided into two main classes, probabilistic (or \"Monte Carlo\") and deterministic algorithms. Deterministic algorithms provide a way to tell for sure whether a given number is prime or not. For example, trial division is a deterministic algorithm because, if performed correctly, it will always identify a prime number as prime and a composite number as composite. Probabilistic algorithms are normally faster, but do not completely prove that a number is prime. These tests rely on testing a given number in a partly random way. For example, a given test might pass all the time if applied to a prime number, but pass only with probability p if applied to a composite number. If we repeat the test n times and pass every time, then the probability that our number is composite is 1/(1-p)n, which decreases exponentially with the number of tests, so we can be as sure as we like (though never perfectly sure) that the number is prime. On the other hand, if the test ever fails, then we know that the number is composite.", "title": "Prime_number", "machine_answer": {"answer_start": 833, "text": "1/(1-p)n"}}